//
//  NewsTVBackgroundShap.swift
//  LetsDoTHis
//
//  Created by Patrick Gao on Apr 30, 2018.
//  Copyright © 2018 Patrick Gao. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class NewsTVBackgroundShap: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawNews1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 750, height: 1334), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 750, height: 1334), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 750, y: resizedFrame.height / 1334)
        
        /// Background Color
        UIColor(hue: 0.563, saturation: 0.033, brightness: 0.965, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Bg Shape
        let bgShape = UIBezierPath()
        bgShape.move(to: CGPoint(x: 58.84, y: 12.56))
        bgShape.addCurve(to: CGPoint(x: 525.97, y: 210.45), controlPoint1: CGPoint(x: 58.84, y: 12.56), controlPoint2: CGPoint(x: 829.53, y: -74.62))
        bgShape.addCurve(to: CGPoint(x: 728.29, y: 544.77), controlPoint1: CGPoint(x: 222.42, y: 495.53), controlPoint2: CGPoint(x: 728.29, y: 544.77))
        bgShape.addCurve(to: CGPoint(x: 728.29, y: 990.09), controlPoint1: CGPoint(x: 728.29, y: 544.77), controlPoint2: CGPoint(x: 1129.37, y: 595.78))
        bgShape.addCurve(to: CGPoint(x: 778.42, y: 1665.42), controlPoint1: CGPoint(x: 475.06, y: 1239.05), controlPoint2: CGPoint(x: 1625.89, y: 1896.98))
        bgShape.addCurve(to: CGPoint(x: 103.24, y: 1027.28), controlPoint1: CGPoint(x: 132.68, y: 1488.97), controlPoint2: CGPoint(x: 326.08, y: 1179.07))
        bgShape.addCurve(to: CGPoint(x: 261.1, y: 474.52), controlPoint1: CGPoint(x: -119.59, y: 875.49), controlPoint2: CGPoint(x: 687.41, y: 855.48))
        bgShape.addCurve(to: CGPoint(x: 58.84, y: 12.56), controlPoint1: CGPoint(x: -165.21, y: 93.55), controlPoint2: CGPoint(x: 58.84, y: 12.56))
        bgShape.close()
        bgShape.move(to: CGPoint(x: 58.84, y: 12.56))
        context.saveGState()
        context.translateBy(x: 577.5, y: 592)
        context.rotate(by: 540 * CGFloat.pi/180)
        context.translateBy(x: -547.5, y: -857)
        bgShape.usesEvenOddFillRule = true
        UIColor(hue: 0.506, saturation: 0.66, brightness: 0.8, alpha: 1).setFill()
        bgShape.fill()
        context.restoreGState()
        /// SearchBar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1246)
            
            /// SearchBar Bg
            let searchBarBg = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 750, height: 88))
            context.saveGState()
            UIColor(hue: 0.649, saturation: 0.5, brightness: 0.949, alpha: 1).setFill()
            searchBarBg.fill()
            context.restoreGState()
            
            /// Typing
            do {
                context.saveGState()
                context.translateBy(x: 30, y: 22)
                
                /// Type anything to sea
                let typeAnythingToSea = NSMutableAttributedString(string: "Type anything to search…")
                typeAnythingToSea.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: typeAnythingToSea.length))
                typeAnythingToSea.addAttribute(.kern, value: 0.95, range: NSRange(location: 0, length: typeAnythingToSea.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 44
                    paragraphStyle.minimumLineHeight = 44
                    typeAnythingToSea.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: typeAnythingToSea.length))
                }
                typeAnythingToSea.addAttribute(.foregroundColor, value: UIColor(hue: 0.604, saturation: 0.032, brightness: 0.969, alpha: 1), range: NSRange(location: 0, length: typeAnythingToSea.length))
                context.saveGState()
                typeAnythingToSea.draw(at: CGPoint(x: 0, y: 2))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Search Icon
            do {
                context.saveGState()
                context.translateBy(x: 650, y: 0)
                
                /// Group
                do {
                    context.saveGState()
                    context.translateBy(x: 32, y: 24)
                    
                    /// Stroke 476
                    let stroke476 = UIBezierPath()
                    stroke476.move(to: CGPoint(x: 34.71, y: 17.36))
                    stroke476.addCurve(to: CGPoint(x: 17.36, y: 34.71), controlPoint1: CGPoint(x: 34.71, y: 26.94), controlPoint2: CGPoint(x: 26.94, y: 34.71))
                    stroke476.addCurve(to: CGPoint(x: 0, y: 17.36), controlPoint1: CGPoint(x: 7.77, y: 34.71), controlPoint2: CGPoint(x: 0, y: 26.94))
                    stroke476.addCurve(to: CGPoint(x: 17.36, y: 0), controlPoint1: CGPoint(x: 0, y: 7.77), controlPoint2: CGPoint(x: 7.77, y: 0))
                    stroke476.addCurve(to: CGPoint(x: 34.71, y: 17.36), controlPoint1: CGPoint(x: 26.94, y: 0), controlPoint2: CGPoint(x: 34.71, y: 7.77))
                    stroke476.close()
                    stroke476.move(to: CGPoint(x: 34.71, y: 17.36))
                    context.saveGState()
                    context.translateBy(x: 0.66, y: 0.42)
                    stroke476.lineCapStyle = .round
                    stroke476.lineWidth = 2
                    UIColor.white.setStroke()
                    stroke476.stroke()
                    context.restoreGState()
                    
                    /// Stroke 477
                    let stroke477 = UIBezierPath()
                    stroke477.move(to: CGPoint.zero)
                    stroke477.addLine(to: CGPoint(x: 7.3, y: 7.3))
                    context.saveGState()
                    context.translateBy(x: 30.31, y: 30.07)
                    stroke477.lineCapStyle = .round
                    stroke477.lineWidth = 2
                    UIColor.white.setStroke()
                    stroke477.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Post 2
        do {
            context.saveGState()
            context.translateBy(x: 128, y: 724)
            
            /// Bg
            let bg2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 592, height: 134))
            context.saveGState()
            context.translateBy(x: 30, y: 312)
            // Warning: Blur effects are not supported.
            UIColor(white: 0.843, alpha: 0.4).setFill()
            bg2.fill()
            context.restoreGState()
            
            /// Bookmark Icon
            do {
                context.saveGState()
                context.translateBy(x: 60, y: 354)
                
                /// Stroke 207
                let stroke207 = UIBezierPath()
                stroke207.move(to: CGPoint(x: 23.57, y: 43.97))
                stroke207.addLine(to: CGPoint(x: 12.07, y: 37.33))
                stroke207.addCurve(to: CGPoint(x: 11.86, y: 37.33), controlPoint1: CGPoint(x: 12, y: 37.3), controlPoint2: CGPoint(x: 11.92, y: 37.3))
                stroke207.addLine(to: CGPoint(x: 0.36, y: 43.97))
                stroke207.addCurve(to: CGPoint(x: 0, y: 43.73), controlPoint1: CGPoint(x: 0.2, y: 44.06), controlPoint2: CGPoint(x: 0, y: 43.93))
                stroke207.addLine(to: CGPoint(x: 0, y: 0.88))
                stroke207.addCurve(to: CGPoint(x: 0.8, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.36, y: 0))
                stroke207.addLine(to: CGPoint(x: 23.13, y: 0))
                stroke207.addCurve(to: CGPoint(x: 23.93, y: 0.88), controlPoint1: CGPoint(x: 23.57, y: 0), controlPoint2: CGPoint(x: 23.93, y: 0.39))
                stroke207.addLine(to: CGPoint(x: 23.93, y: 43.73))
                stroke207.addCurve(to: CGPoint(x: 23.57, y: 43.97), controlPoint1: CGPoint(x: 23.93, y: 43.93), controlPoint2: CGPoint(x: 23.73, y: 44.06))
                stroke207.close()
                stroke207.move(to: CGPoint(x: 23.57, y: 43.97))
                context.saveGState()
                stroke207.lineJoinStyle = .round
                stroke207.lineCapStyle = .round
                context.saveGState()
                stroke207.lineWidth = 4
                context.beginPath()
                context.addPath(stroke207.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.614, saturation: 0.38, brightness: 0.196, alpha: 1).setStroke()
                stroke207.stroke()
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Text
            do {
                context.saveGState()
                context.translateBy(x: 127, y: 322)
                
                /// Date
                let date = NSMutableAttributedString(string: "February 15, 2017")
                date.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 24)!, range: NSRange(location: 0, length: date.length))
                date.addAttribute(.kern, value: 1.08, range: NSRange(location: 0, length: date.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    date.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: date.length))
                }
                date.addAttribute(.foregroundColor, value: UIColor(hue: 0.638, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: date.length))
                context.saveGState()
                date.draw(in: CGRect(x: 248, y: 92, width: 227, height: 25))
                context.restoreGState()
                
                /// Tittle
                let tittle = NSMutableAttributedString(string: "Renault’s R.S. 2027 Concept\nThe Future Of F1")
                tittle.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: tittle.length))
                tittle.addAttribute(.kern, value: 2, range: NSRange(location: 0, length: 43))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 41
                    paragraphStyle.minimumLineHeight = 41
                    tittle.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tittle.length))
                }
                context.saveGState()
                tittle.draw(in: CGRect(x: 0, y: 0, width: 475, height: 91))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Photo
            do {
                context.saveGState()
                
                /// Mask
                let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 622, height: 312))
                context.saveGState()
                context.saveGState()
                context.beginPath()
                context.addPath(mask.cgPath)
                context.addRect(mask.bounds.insetBy(dx: -32, dy: -37))
                context.clip(using: .evenOdd)
                context.translateBy(x: -655, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 665, y: 15)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 22 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                mask.fill()
                context.restoreGState()
                UIColor(white: 0.852, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Avatar
            do {
                context.saveGState()
                context.translateBy(x: 30, y: 30)
                
                /// Bg
                let bg3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
                context.saveGState()
                UIColor.white.setFill()
                bg3.fill()
                context.restoreGState()
                
                /// Bitmap
                do {
                    context.saveGState()
                    context.translateBy(x: 5, y: 5)
                    
                    /// Mask
                    let mask2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 70, height: 70))
                    context.saveGState()
                    UIColor.white.setFill()
                    mask2.fill()
                    context.restoreGState()
                    
                    /// Mask (Outline Mask)
                    context.saveGState()
                    mask2.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Mask (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Post 3
        do {
            context.saveGState()
            context.translateBy(x: 697, y: 203)
            
            /// Bg
            let bg4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 592, height: 134))
            context.saveGState()
            context.translateBy(x: 30, y: 312)
            // Warning: Blur effects are not supported.
            UIColor(white: 0.747, alpha: 0.4).setFill()
            bg4.fill()
            context.restoreGState()
            
            /// Text
            do {
                context.saveGState()
                context.translateBy(x: 50, y: 322)
                
                /// Date
                let date2 = NSMutableAttributedString(string: "March 04, 2017")
                date2.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 24)!, range: NSRange(location: 0, length: date2.length))
                date2.addAttribute(.kern, value: 1, range: NSRange(location: 0, length: 13))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    date2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: date2.length))
                }
                date2.addAttribute(.foregroundColor, value: UIColor(hue: 0.638, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: date2.length))
                context.saveGState()
                date2.draw(in: CGRect(x: 0, y: 92, width: 201, height: 25))
                context.restoreGState()
                
                /// Title
                let title = NSMutableAttributedString(string: "Tech Nightmare \nMost Hot Game 2017")
                title.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: 16))
                title.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 28)!, range: NSRange(location: 16, length: 4))
                title.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 20, length: 14))
                title.addAttribute(.kern, value: 2, range: NSRange(location: 0, length: title.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 41
                    paragraphStyle.minimumLineHeight = 41
                    title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                }
                title.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.38, brightness: 0.196, alpha: 1), range: NSRange(location: 0, length: title.length))
                context.saveGState()
                title.draw(in: CGRect(x: 0, y: 0, width: 402, height: 91))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Bookmark icon
            do {
                context.saveGState()
                context.translateBy(x: 568, y: 354)
                
                /// Stroke 207
                let stroke2 = UIBezierPath()
                stroke2.move(to: CGPoint(x: 23.64, y: 43.97))
                stroke2.addLine(to: CGPoint(x: 12.11, y: 37.33))
                stroke2.addCurve(to: CGPoint(x: 11.89, y: 37.33), controlPoint1: CGPoint(x: 12.04, y: 37.3), controlPoint2: CGPoint(x: 11.96, y: 37.3))
                stroke2.addLine(to: CGPoint(x: 0.36, y: 43.97))
                stroke2.addCurve(to: CGPoint(x: 0, y: 43.73), controlPoint1: CGPoint(x: 0.2, y: 44.06), controlPoint2: CGPoint(x: 0, y: 43.93))
                stroke2.addLine(to: CGPoint(x: 0, y: 0.88))
                stroke2.addCurve(to: CGPoint(x: 0.8, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.36, y: 0))
                stroke2.addLine(to: CGPoint(x: 23.2, y: 0))
                stroke2.addCurve(to: CGPoint(x: 24, y: 0.88), controlPoint1: CGPoint(x: 23.64, y: 0), controlPoint2: CGPoint(x: 24, y: 0.39))
                stroke2.addLine(to: CGPoint(x: 24, y: 43.73))
                stroke2.addCurve(to: CGPoint(x: 23.64, y: 43.97), controlPoint1: CGPoint(x: 24, y: 43.93), controlPoint2: CGPoint(x: 23.8, y: 44.06))
                stroke2.close()
                stroke2.move(to: CGPoint(x: 23.64, y: 43.97))
                context.saveGState()
                stroke2.lineJoinStyle = .round
                stroke2.lineCapStyle = .round
                context.saveGState()
                stroke2.lineWidth = 26
                context.beginPath()
                context.addPath(stroke2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.614, saturation: 0.38, brightness: 0.196, alpha: 1).setStroke()
                stroke2.stroke()
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Photo
            do {
                context.saveGState()
                
                /// Mask
                let mask3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 622, height: 312))
                context.saveGState()
                context.saveGState()
                context.beginPath()
                context.addPath(mask3.cgPath)
                context.addRect(mask3.bounds.insetBy(dx: -32, dy: -37))
                context.clip(using: .evenOdd)
                context.translateBy(x: -655, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 645, y: 15)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 22 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                mask3.fill()
                context.restoreGState()
                UIColor(white: 0.847, alpha: 1).setFill()
                mask3.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask3.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Avatar
            do {
                context.saveGState()
                context.translateBy(x: 540, y: 30)
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
                context.saveGState()
                UIColor(hue: 0.134, saturation: 0.917, brightness: 0.941, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                /// Bitmap
                do {
                    context.saveGState()
                    context.translateBy(x: 5, y: 5)
                    
                    /// Mask
                    let mask4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 70, height: 70))
                    context.saveGState()
                    UIColor.white.setFill()
                    mask4.fill()
                    context.restoreGState()
                    
                    /// Mask (Outline Mask)
                    context.saveGState()
                    mask4.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Mask (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Post 1
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 203)
            
            /// Bg
            let bg5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 592, height: 134))
            context.saveGState()
            context.translateBy(x: 0, y: 312)
            // Warning: Blur effects are not supported.
            UIColor(white: 0.843, alpha: 0.4).setFill()
            bg5.fill()
            context.restoreGState()
            
            /// Bookmark icon
            do {
                context.saveGState()
                context.translateBy(x: 538, y: 354)
                
                /// Stroke 207
                let stroke3 = UIBezierPath()
                stroke3.move(to: CGPoint(x: 23.64, y: 43.97))
                stroke3.addLine(to: CGPoint(x: 12.11, y: 37.33))
                stroke3.addCurve(to: CGPoint(x: 11.89, y: 37.33), controlPoint1: CGPoint(x: 12.04, y: 37.3), controlPoint2: CGPoint(x: 11.96, y: 37.3))
                stroke3.addLine(to: CGPoint(x: 0.36, y: 43.97))
                stroke3.addCurve(to: CGPoint(x: 0, y: 43.73), controlPoint1: CGPoint(x: 0.2, y: 44.06), controlPoint2: CGPoint(x: 0, y: 43.93))
                stroke3.addLine(to: CGPoint(x: 0, y: 0.88))
                stroke3.addCurve(to: CGPoint(x: 0.8, y: 0), controlPoint1: CGPoint(x: 0, y: 0.39), controlPoint2: CGPoint(x: 0.36, y: 0))
                stroke3.addLine(to: CGPoint(x: 23.2, y: 0))
                stroke3.addCurve(to: CGPoint(x: 24, y: 0.88), controlPoint1: CGPoint(x: 23.64, y: 0), controlPoint2: CGPoint(x: 24, y: 0.39))
                stroke3.addLine(to: CGPoint(x: 24, y: 43.73))
                stroke3.addCurve(to: CGPoint(x: 23.64, y: 43.97), controlPoint1: CGPoint(x: 24, y: 43.93), controlPoint2: CGPoint(x: 23.8, y: 44.06))
                stroke3.close()
                stroke3.move(to: CGPoint(x: 23.64, y: 43.97))
                context.saveGState()
                stroke3.lineJoinStyle = .round
                stroke3.lineCapStyle = .round
                context.saveGState()
                stroke3.lineWidth = 26
                context.beginPath()
                context.addPath(stroke3.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.614, saturation: 0.38, brightness: 0.196, alpha: 1).setStroke()
                stroke3.stroke()
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Text
            do {
                context.saveGState()
                context.translateBy(x: 20, y: 322)
                
                /// Date
                let date3 = NSMutableAttributedString(string: "April 22, 2017")
                date3.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 24)!, range: NSRange(location: 0, length: date3.length))
                date3.addAttribute(.kern, value: 1, range: NSRange(location: 0, length: 13))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 22
                    paragraphStyle.minimumLineHeight = 22
                    date3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: date3.length))
                }
                date3.addAttribute(.foregroundColor, value: UIColor(hue: 0.638, saturation: 1, brightness: 1, alpha: 1), range: NSRange(location: 0, length: date3.length))
                context.saveGState()
                date3.draw(in: CGRect(x: 0, y: 92, width: 180, height: 25))
                context.restoreGState()
                
                /// Title
                let title2 = NSMutableAttributedString(string: "Little Nightmare \nThe Hot Game 2017")
                title2.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 28)!, range: NSRange(location: 0, length: title2.length))
                title2.addAttribute(.kern, value: 2, range: NSRange(location: 0, length: title2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 41
                    paragraphStyle.minimumLineHeight = 41
                    title2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title2.length))
                }
                title2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.38, brightness: 0.196, alpha: 1), range: NSRange(location: 0, length: title2.length))
                context.saveGState()
                title2.draw(in: CGRect(x: 0, y: 0, width: 402, height: 91))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Photo
            do {
                context.saveGState()
                
                /// Mask
                let mask5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 622, height: 312))
                context.saveGState()
                context.saveGState()
                context.beginPath()
                context.addPath(mask5.cgPath)
                context.addRect(mask5.bounds.insetBy(dx: -32, dy: -37))
                context.clip(using: .evenOdd)
                context.translateBy(x: -655, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 645, y: 15)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 22 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                mask5.fill()
                context.restoreGState()
                UIColor(white: 0.847, alpha: 1).setFill()
                mask5.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask5.addClip()
                
                // Empty.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Avatar
            do {
                context.saveGState()
                context.translateBy(x: 510, y: 30)
                
                /// Oval
                let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 80, height: 80))
                context.saveGState()
                UIColor.white.setFill()
                oval2.fill()
                context.restoreGState()
                
                /// Bitmap
                do {
                    context.saveGState()
                    context.translateBy(x: 5, y: 5)
                    
                    /// Mask
                    let mask6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 70, height: 70))
                    context.saveGState()
                    UIColor.white.setFill()
                    mask6.fill()
                    context.restoreGState()
                    
                    /// Mask (Outline Mask)
                    context.saveGState()
                    mask6.addClip()
                    
                    // Empty.
                    
                    context.restoreGState()
                    // End Mask (Outline Mask)
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Nav Bar
        do {
            context.saveGState()
            
            /// Stt Bar
            let sttBar = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 750, height: 128))
            context.saveGState()
            UIColor(hue: 0.649, saturation: 0.5, brightness: 0.949, alpha: 1).setFill()
            sttBar.fill()
            context.restoreGState()
            
            /// NavBar Bg
            let navBarBg = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 750, height: 88))
            context.saveGState()
            context.translateBy(x: 0, y: 40)
            UIColor(hue: 0.649, saturation: 0.5, brightness: 0.949, alpha: 1).setFill()
            navBarBg.fill()
            context.restoreGState()
            
            /// TECH NEWS
            let tECHNEWS = NSMutableAttributedString(string: "TECH NEWS")
            tECHNEWS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 34)!, range: NSRange(location: 0, length: tECHNEWS.length))
            tECHNEWS.addAttribute(.kern, value: 1.08, range: NSRange(location: 0, length: tECHNEWS.length))
            tECHNEWS.addAttribute(.foregroundColor, value: UIColor(hue: 0.562, saturation: 0.033, brightness: 0.965, alpha: 1), range: NSRange(location: 0, length: tECHNEWS.length))
            context.saveGState()
            tECHNEWS.draw(at: CGPoint(x: 256, y: 64))
            context.restoreGState()
            
            /// Menu Icon
            do {
                context.saveGState()
                context.translateBy(x: 30, y: 62)
                
                /// Stroke 673
                let stroke673 = UIBezierPath()
                stroke673.move(to: CGPoint(x: 0, y: 1.53))
                stroke673.addLine(to: CGPoint(x: 25.58, y: 1.53))
                context.saveGState()
                context.translateBy(x: 10.64, y: 10.74)
                context.rotate(by: 315 * CGFloat.pi/180)
                context.translateBy(x: -12.79, y: -1.53)
                stroke673.lineJoinStyle = .round
                stroke673.lineCapStyle = .round
                stroke673.lineWidth = 3
                UIColor.white.setStroke()
                stroke673.stroke()
                context.restoreGState()
                
                /// Stroke 677
                let stroke677 = UIBezierPath()
                stroke677.move(to: CGPoint(x: 0, y: 1.53))
                stroke677.addLine(to: CGPoint(x: 45.02, y: 1.53))
                context.saveGState()
                context.translateBy(x: 21.85, y: 22)
                context.rotate(by: 315 * CGFloat.pi/180)
                context.translateBy(x: -22.51, y: -1.53)
                stroke677.lineJoinStyle = .round
                stroke677.lineCapStyle = .round
                stroke677.lineWidth = 3
                UIColor.white.setStroke()
                stroke677.stroke()
                context.restoreGState()
                
                /// Stroke 675
                let stroke675 = UIBezierPath()
                stroke675.move(to: CGPoint(x: 0, y: 1.53))
                stroke675.addLine(to: CGPoint(x: 25.58, y: 1.53))
                context.saveGState()
                context.translateBy(x: 33.07, y: 33.26)
                context.rotate(by: 315 * CGFloat.pi/180)
                context.translateBy(x: -12.79, y: -1.53)
                stroke675.lineJoinStyle = .round
                stroke675.lineCapStyle = .round
                stroke675.lineWidth = 3
                UIColor.white.setStroke()
                stroke675.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfNews1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 750, height: 1334), false, 0)
        NewsTVBackgroundShap.drawNews1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
